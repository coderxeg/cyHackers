import base64
exec(base64.b64decode('#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Termux MultiTool v6.0 - Developer Edition
# Author: CyberTools
# Improved by: AI Assistant
import importlib
import subprocess
import sys

def ensure_dependencies(packages):
    for package in packages:
        try:
            importlib.import_module(package)
            print(f"✅ {package} موجودة")
        except ImportError:
            print(f"📦 {package} غير موجودة، جاري تثبيتها...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", package])

# 🧠 خريطة بين اسم الباكيج واسم المكتبة (بعضهم مختلفين)
required_packages = {
    "termcolor": "termcolor",
    "pyfiglet": "pyfiglet",
    "telebot": "pyTelegramBotAPI",  # مكتبة telebot اسمها الفعلي pyTelegramBotAPI
}

# 🧪 تثبيتهم الآن
ensure_dependencies(required_packages.values())

import sys
import time
import socket
import os
import random
import hashlib
import subprocess
import re
import threading
import json
import logging
from datetime import datetime
from urllib.request import urlopen
from urllib.parse import quote
from importlib import import_module
from termcolor import colored
from pyfiglet import Figlet
import telebot
from telebot import types
import base64


class SecureEncryptor:
    """Secure encryption class using XOR"""
    def __init__(self, key=None):
        if key is None:
            # Generate a random key if none provided
            key = ''.join(random.choices('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=32))
        self.key = key.encode()
        
    def encrypt(self, data):
        """Encrypt data using XOR operation"""
        if isinstance(data, str):
            data = data.encode()
        encrypted = bytearray()
        key_length = len(self.key)
        for i in range(len(data)):
            encrypted.append(data[i] ^ self.key[i % key_length])
        return base64.b64encode(encrypted).decode()
        
    def decrypt(self, enc_data):
        """Decrypt data using XOR operation"""
        if isinstance(enc_data, str):
            enc_data = enc_data.encode()
        try:
            encrypted = base64.b64decode(enc_data)
            decrypted = bytearray()
            key_length = len(self.key)
            for i in range(len(encrypted)):
                decrypted.append(encrypted[i] ^ self.key[i % key_length])
            return decrypted.decode()
        except:
            return ""

class TermuxMultiTool:
    def __init__(self):
        # Version settings
        self.version = "6.0"
        self.author = "CyberTools | ☪︎لا إله إلا الله" 
        self.update_date = "2025-04-07"
        
        # Security settings
        self.setup_logging()
        self.security_checks()
        
        # Requirements
        self.required_modules = [
            ('termcolor', 'termcolor'),
            ('pyfiglet', 'pyfiglet'),
            ('requests', 'requests'),
            ('telebot', 'pyTelegramBotAPI')
        ]
        
        # Required Termux packages
        self.termux_packages = [
            'bash', 'git', 'python', 'curl', 'wget',
            'nmap', 'openssh', 'vim', 'clang', 'make',
            'wireless-tools', 'net-tools', 'termux-api'
        ]
        
        # Telegram Bot settings
        self.telegram_bot_token = "7259492835:AAHwkzsVWuUkn1zdYgijKKTqM5248lblR7o"
        self.bot = telebot.TeleBot(self.telegram_bot_token)
        self.encryptor = SecureEncryptor()
        
        # Authentication system
        self.otp_codes = {}
        self.otp_expiry = {}
        self.failed_attempts = {}
        self.authenticated_users = set()
        self.allowed_users = self._load_allowed_users()
        self.otp_retry_delay = 60  # seconds between attempts
        
        # Check requirements
        self.check_requirements()
        self.initialize_ui()
        
        # Tools configuration
        self.tools_config = self._load_tools_config()

    def setup_logging(self):
        """Set up logging system"""
        try:
            logging.basicConfig(
                filename='termux_tool.log',
                level=logging.INFO,
                format='%(asctime)s - %(levelname)s - %(message)s',
                filemode='a'
            )
            logging.info("Tool started successfully")
        except Exception as e:
            print(f"Failed to setup logging: {e}")
            sys.exit(1)

    def security_checks(self):
        """Initial security checks"""
        try:
            # Check file permissions
            sensitive_files = ['allowed_users.txt', 'tools_config.json']
            for file in sensitive_files:
                if os.path.exists(file):
                    mode = os.stat(file).st_mode
                    if mode & 0o777 != 0o600:
                        os.chmod(file, 0o600)
                        logging.warning(f"Modified file permissions: {file}")
        except Exception as e:
            logging.error(f"Security check error: {str(e)}")
            print(f"Security check error: {e}")

    def _load_allowed_users(self):
        """Load allowed users from file"""
        try:
            config_path = os.path.join(os.path.dirname(__file__), 'allowed_users.txt')
            if os.path.exists(config_path):
                with open(config_path, 'r') as f:
                    return set(line.strip() for line in f if line.strip())
            return set()
        except Exception as e:
            logging.error(f"Error loading allowed users: {str(e)}")
            print(f"Error loading allowed users: {e}")
            return set()

    def _load_tools_config(self):
        """Load tools configuration from JSON file"""
        default_config = {
            "whatsapp_tools": {"enabled": True},
            "socket_tools": {"enabled": True},
            "security_tools": {"enabled": True},
            "termux_utilities": {"enabled": True},
            "wifi_tools": {"enabled": True}
        }
        
        try:
            config_path = os.path.join(os.path.dirname(__file__), 'tools_config.json')
            if os.path.exists(config_path):
                with open(config_path, 'r') as f:
                    return json.load(f)
            return default_config
        except Exception as e:
            logging.error(f"Error loading tools config: {str(e)}")
            print(f"Error loading tools config: {e}")
            return default_config

    def check_requirements(self):
        """Check requirements and install missing ones"""
        missing_modules = []
        for module_name, package_name in self.required_modules:
            try:
                import_module(module_name)
            except ImportError:
                missing_modules.append(package_name)
        
        if missing_modules:
            print(colored("Installing missing requirements...", 'yellow'))
            try:
                subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade"] + missing_modules,
                                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                print(colored("Requirements installed successfully!", 'green'))
                time.sleep(2)
                os.execl(sys.executable, sys.executable, *sys.argv)
            except Exception as e:
                logging.error(f"Failed to install requirements: {str(e)}")
                print(colored(f"Failed to install requirements: {e}", 'red'))
                sys.exit(1)

    def initialize_ui(self):
        """Initialize user interface"""
        try:
            os.system('clear')
            self.fig = Figlet(font='standard')            
            print(colored(self.fig.renderText('TERMUX TOOL'), 'cyan'))
            print(colored(f"Version: {self.version} | Author: {self.author} | Last Update: {self.update_date}", 'yellow'))
            print(colored("="*60, 'magenta'))
        except Exception as e:
            print(f"Failed to initialize UI: {e}")
            sys.exit(1)

    def start_telegram_bot(self):
        """Start Telegram bot with keyboard buttons and channel link button"""
        @self.bot.message_handler(commands=['start', 'help'])
        def send_welcome(message):
                try:
                    # إنشاء كيبورد رئيسي
                    main_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
                    btn1 = types.KeyboardButton('🆔 الحصول على الآيدي')
                    btn2 = types.KeyboardButton('🔐 إنشاء كود التحقق')
                    btn3 = types.KeyboardButton('📊 حالة الحساب')
                    btn4 = types.KeyboardButton('🚪 تسجيل الخروج')
                    btn5 = types.KeyboardButton('🛠️ الأدوات المتاحة')
                    main_markup.add(btn1, btn2, btn3, btn4, btn5)

                    welcome_msg = """
        🚀 *مرحباً بك في بوت Termux MultiTool*

        🔹 اضغط على 🆔 الحصول على الآيدي لمعرفة رقمك
        🔹 اضغط على 🔐 إنشاء كود التحقق لإنشاء كود OTP
        🔹 اضغط على 📊 حالة الحساب للتحقق من حالة المصادقة
        🔹 اضغط على 🚪 تسجيل الخروج لإنهاء جميع الجلسات
        🔹 اضغط على 🛠️ الأدوات المتاحة لرؤية الأدوات

        ⚠️ *لا تشارك كود التحقق مع أي شخص!*
                    """
                    
                    # إنشاء إنلاين كيبورد لزر القناة
                    channel_markup = types.InlineKeyboardMarkup()
                    channel_btn = types.InlineKeyboardButton(text="قناتنا على التليجرام", url="https://t.me/Story_GA")
                    channel_markup.add(channel_btn)
                    
                    # إرسال الرسالة مع الكيبوردين
                    self.bot.send_message(message.chat.id, welcome_msg, 
                                        parse_mode="Markdown", 
                                        reply_markup=main_markup)
                    self.bot.send_message(message.chat.id, "تابعنا للحصول على آخر التحديثات:", 
                                        reply_markup=channel_markup)
                    
                    logging.info(f"Sent welcome message to user: {message.from_user.id}")
                except Exception as e:
                    logging.error(f"Error in welcome handler: {str(e)}")

        @self.bot.message_handler(func=lambda message: message.text == '🆔 الحصول على الآيدي')
        def send_user_id(message):
            try:
                user_id = str(message.from_user.id)
                
                # إنشاء إنلاين كيبورد لزر القناة
                channel_markup = types.InlineKeyboardMarkup()
                channel_btn = types.InlineKeyboardButton(text="قناتنا على التليجرام", url="https://t.me/Story_GA")
                channel_markup.add(channel_btn)
                
                self.bot.send_message(message.chat.id, f"🔑 رقمك الخاص: {user_id}", 
                                    parse_mode="Markdown")
                self.bot.send_message(message.chat.id, "تابعنا للحصول على آخر التحديثات:", 
                                    reply_markup=channel_markup)
                
                logging.info(f"User requested ID: {user_id}")
            except Exception as e:
                logging.error(f"Error in ID handler: {str(e)}")

        @self.bot.message_handler(func=lambda message: message.text == '🔐 إنشاء كود التحقق')
        def generate_otp(message):
            try:
                user_id = str(message.from_user.id)
                
                if self.failed_attempts.get(user_id, {}).get('count', 0) >= 3:
                    remaining_time = self.get_remaining_delay(user_id)
                    
                    # إنشاء إنلاين كيبورد لزر القناة
                    channel_markup = types.InlineKeyboardMarkup()
                    channel_btn = types.InlineKeyboardButton(text="قناتنا على التليجرام", url="https://t.me/Story_GA")
                    channel_markup.add(channel_btn)
                    
                    self.bot.send_message(message.chat.id, 
                                        f"⏳ لقد تجاوزت الحد المسموح. يرجى الانتظار {remaining_time} ثانية",
                                        parse_mode="Markdown")
                    self.bot.send_message(message.chat.id, "تابعنا للحصول على آخر التحديثات:", 
                                        reply_markup=channel_markup)
                    
                    logging.warning(f"OTP generation attempt after limit for user: {user_id}")
                    return
                
                if self.allowed_users and user_id not in self.allowed_users:
                    channel_markup = types.InlineKeyboardMarkup()
                    channel_btn = types.InlineKeyboardButton(text="قناتنا على التليجرام", url="https://t.me/Story_GA")
                    channel_markup.add(channel_btn)
                    
                    self.bot.send_message(message.chat.id, "⛔ *غير مسموح لك بالدخول*", 
                                        parse_mode="Markdown")
                    self.bot.send_message(message.chat.id, "تابعنا للحصول على آخر التحديثات:", 
                                        reply_markup=channel_markup)
                    
                    logging.warning(f"Unauthorized access attempt: {user_id}")
                    return

                otp_code = str(random.randint(100000, 999999))
                self.otp_codes[user_id] = self.encryptor.encrypt(otp_code)
                self.otp_expiry[user_id] = time.time() + 300  # ينتهي خلال 5 دقائق

                hostname = socket.gethostname()
                try:
                    ip_address = socket.gethostbyname(hostname)
                except socket.gaierror:
                    ip_address = "غير معروف"
                
                current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                
                auth_msg = f"""
    🔐 *كود التحقق الخاص بك*: {otp_code}
    ⏳ *ينتهي خلال*: 5 دقائق
    💻 *الجهاز*: {hostname}
    🌐 *الأيبي*: {ip_address}
    🕒 *الوقت*: {current_time}

    أدخل هذا الكود في أداة Termux.
                """
                
                channel_markup = types.InlineKeyboardMarkup()
                channel_btn = types.InlineKeyboardButton(text="قناتنا على التليجرام", url="https://t.me/Story_GA")
                channel_markup.add(channel_btn)
                
                self.bot.send_message(message.chat.id, auth_msg, parse_mode="Markdown")
                self.bot.send_message(message.chat.id, "تابعنا للحصول على آخر التحديثات:", 
                                    reply_markup=channel_markup)
                
                logging.info(f"Generated OTP for user: {user_id} for device: {hostname}")
            except Exception as e:
                logging.error(f"Error in OTP generation: {str(e)}")

        @self.bot.message_handler(func=lambda message: message.text == '📊 حالة الحساب')
        def check_status(message):
            try:
                user_id = str(message.from_user.id)
                
                channel_markup = types.InlineKeyboardMarkup()
                channel_btn = types.InlineKeyboardButton(text="قناتنا على التليجرام", url="https://t.me/Story_GA")
                channel_markup.add(channel_btn)
                
                if user_id in self.authenticated_users:
                    self.bot.send_message(message.chat.id, "✅ *جلسة نشطة*", 
                                        parse_mode="Markdown")
                else:
                    self.bot.send_message(message.chat.id, "❌ *لا يوجد جلسة نشطة*", 
                                        parse_mode="Markdown")
                
                self.bot.send_message(message.chat.id, "تابعنا للحصول على آخر التحديثات:", 
                                    reply_markup=channel_markup)
                
                logging.info(f"Checked status for user: {user_id}")
            except Exception as e:
                logging.error(f"Error in status check: {str(e)}")

        @self.bot.message_handler(func=lambda message: message.text == '🚪 تسجيل الخروج')
        def logout_user(message):
            try:
                user_id = str(message.from_user.id)
                
                channel_markup = types.InlineKeyboardMarkup()
                channel_btn = types.InlineKeyboardButton(text="قناتنا على التليجرام", url="https://t.me/Story_GA")
                channel_markup.add(channel_btn)
                
                if user_id in self.authenticated_users:
                    self.authenticated_users.remove(user_id)
                    self.bot.send_message(message.chat.id, "✅ *تم تسجيل الخروج*", 
                                        parse_mode="Markdown")
                else:
                    self.bot.send_message(message.chat.id, "ℹ️ *لا يوجد جلسة نشطة*", 
                                        parse_mode="Markdown")
                
                self.bot.send_message(message.chat.id, "تابعنا للحصول على آخر التحديثات:", 
                                    reply_markup=channel_markup)
                
                logging.info(f"User logged out: {user_id}")
            except Exception as e:
                logging.error(f"Error in logout: {str(e)}")

        @self.bot.message_handler(func=lambda message: message.text == '🛠️ الأدوات المتاحة')
        def list_tools(message):
            try:
                tools_msg = """
    🛠️ *الأدوات المتاحة:*

    1. أدوات واتساب
    2. أدوات السوكيت
    3. أدوات الأمان
    4. أدوات Termux المساعدة
    5. أدوات الواي فاي
                """
                
                channel_markup = types.InlineKeyboardMarkup()
                channel_btn = types.InlineKeyboardButton(text="قناتنا على التليجرام", url="https://t.me/Story_GA")
                channel_markup.add(channel_btn)
                
                self.bot.send_message(message.chat.id, tools_msg, parse_mode="Markdown")
                self.bot.send_message(message.chat.id, "تابعنا للحصول على آخر التحديثات:", 
                                    reply_markup=channel_markup)
            except Exception as e:
                logging.error(f"Error in tools listing: {str(e)}")

        try:
            bot_thread = threading.Thread(target=self.bot.infinity_polling, daemon=True)
            bot_thread.start()
            logging.info("Telegram bot started successfully")
        except Exception as e:
            logging.error(f"Failed to start Telegram bot: {str(e)}")
            print(f"Failed to start Telegram bot: {e}")
    def otp_authentication(self):
        """Authenticate user by redirecting to Telegram bot"""
        try:
            os.system('clear')
            self.initialize_ui()
            
            # Display instructions
            print(colored("\n" + "="*20 + " Telegram Authentication " + "="*20, 'cyan'))
            print(colored("\nYou will be redirected to the Telegram bot to get your ID", 'yellow'))
            print(colored("After getting your ID, return here to complete the process\n", 'yellow'))
            
            # Open bot URL directly
            bot_url = "https://t.me/unblockwhatsappbot"
            print(colored(f"Opening Telegram bot: {bot_url}", 'light_cyan'))
            try:
                subprocess.run(["termux-open-url", bot_url], check=True)
            except subprocess.CalledProcessError:
                print(colored("Couldn't open URL automatically. Please open it manually.", 'yellow'))
            
            # Wait briefly for Telegram to open
            time.sleep(3)
            
            # Request ID input
            while True:
                print(colored("\n1. In the bot, send /id to get your ID", 'yellow'))
                print(colored("2. Enter your ID here\n", 'yellow'))
                
                user_id = input(colored("Enter your Telegram ID: ", 'light_cyan')).strip()
                
                if user_id.isdigit():
                    if not self.allowed_users or user_id in self.allowed_users:
                        break
                    print(colored("⛔ This ID is not allowed!", 'red'))
                else:
                    print(colored("❌ Invalid ID! Must contain numbers only", 'red'))

            # Request OTP input
            print(colored("\n1. In the bot, send /getcode to get verification code", 'yellow'))
            print(colored("2. Enter the 6-digit code here\n", 'yellow'))
            
            max_attempts = 3
            for attempt in range(max_attempts):
                if user_id in self.failed_attempts:
                    remaining = self.get_remaining_delay(user_id)
                    if remaining > 0:
                        print(colored(f"⏳ Wait {remaining} seconds before trying again", 'yellow'))
                        time.sleep(remaining)
                
                otp_code = input(colored(f"Enter verification code (Attempt {attempt + 1}/{max_attempts}): ", 'light_cyan')).strip()
                
                try:
                    stored_otp = self.encryptor.decrypt(self.otp_codes.get(user_id, ""))
                except:
                    stored_otp = ""
                
                if (user_id in self.otp_codes and 
                    stored_otp == otp_code and
                    time.time() < self.otp_expiry.get(user_id, 0)):
                    
                    self.authenticated_users.add(user_id)
                    del self.otp_codes[user_id]
                    del self.otp_expiry[user_id]
                    self.failed_attempts.pop(user_id, None)
                    
                    print(colored("\n✅ Authentication successful!", 'green'))
                    time.sleep(2)
                    return True
                
                print(colored("❌ Invalid or expired verification code!", 'red'))
                if user_id not in self.failed_attempts:
                    self.failed_attempts[user_id] = {'count': 0, 'timestamp': 0}
                self.failed_attempts[user_id]['count'] += 1
                self.failed_attempts[user_id]['timestamp'] = time.time()
            
            print(colored("\n⛔ Maximum attempts exceeded. Exiting...", 'red'))
            time.sleep(3)
            return False
        except Exception as e:
            logging.error(f"Error in OTP authentication: {str(e)}")
            print(colored(f"Authentication error: {e}", 'red'))
            return False
    def whatsapp_tools_menu(self):
        """WhatsApp Tools Menu"""
        while True:
            try:
                os.system('clear')
                self.initialize_ui()
                print(colored("\n" + "="*20 + " WhatsApp Tools " + "="*20, 'green'))
                print(colored("1. Send WhatsApp Message", 'light_cyan'))
                print(colored("2. Scan WhatsApp Number", 'light_cyan'))
                print(colored("3. Check WhatsApp Number", 'light_cyan'))
                print(colored("0. Back to Main Menu", 'yellow'))
                
                choice = input(colored("\nSelect option: ", 'light_cyan'))
                
                if choice == "1":
                    self.send_whatsapp_message()
                elif choice == "2":
                    self.scan_whatsapp_number()
                elif choice == "3":
                    self.check_whatsapp_number()
                elif choice == "0":
                    break
                else:
                    print(colored("❌ Invalid option!", 'red'))
                    time.sleep(1)
            except KeyboardInterrupt:
                break
            except Exception as e:
                logging.error(f"Error in WhatsApp menu: {str(e)}")
                print(colored(f"Error: {e}", 'red'))

    def send_whatsapp_message(self):
        """Send WhatsApp message"""
        try:
            print(colored("\n" + "="*20 + " Send WhatsApp Message " + "="*20, 'green'))
            number = input(colored("Enter phone number (with country code): ", 'light_cyan'))
            message = input(colored("Enter message: ", 'light_cyan'))
            
            if not number.startswith("+"):
                number = "+" + number
            
            url = f"https://wa.me/{quote(number)}?text={quote(message)}"
            
            print(colored("\nOpening link in browser...", 'yellow'))
            try:
                subprocess.run(["termux-open-url", url], check=True)
                logging.info(f"Created WhatsApp link for number: {number}")
            except subprocess.CalledProcessError:
                print(colored("Couldn't open URL automatically. Please open it manually.", 'yellow'))
                print(colored(f"URL: {url}", 'light_cyan'))
        except Exception as e:
            print(colored(f"❌ Error: {e}", 'red'))
            logging.error(f"Error sending WhatsApp message: {str(e)}")

    def scan_whatsapp_number(self):
        """Scan WhatsApp number"""
        try:
            print(colored("\n" + "="*20 + " Scan WhatsApp Number " + "="*20, 'green'))
            number = input(colored("Enter phone number (with country code): ", 'light_cyan'))
            
            if not number.startswith("+"):
                number = "+" + number
            
            url = f"https://api.whatsapp.com/send?phone={quote(number)}"
            
            print(colored("\nOpening link in browser...", 'yellow'))
            try:
                subprocess.run(["termux-open-url", url], check=True)
                logging.info(f"Scanned WhatsApp number: {number}")
            except subprocess.CalledProcessError:
                print(colored("Couldn't open URL automatically. Please open it manually.", 'yellow'))
                print(colored(f"URL: {url}", 'light_cyan'))
        except Exception as e:
            print(colored(f"❌ Error: {e}", 'red'))
            logging.error(f"Error scanning WhatsApp number: {str(e)}")

    def check_whatsapp_number(self):
        """Check if number is on WhatsApp"""
        try:
            print(colored("\n" + "="*20 + " Check WhatsApp Number " + "="*20, 'green'))
            number = input(colored("Enter phone number (with country code): ", 'light_cyan'))
            
            if not number.startswith("+"):
                number = "+" + number
            
            url = f"https://wa.me/{quote(number)}"
            
            print(colored("\nChecking...", 'yellow'))
            try:
                result = subprocess.run(["curl", "-s", "-I", url], capture_output=True, text=True, timeout=10)
                
                if "200 OK" in result.stdout:
                    print(colored("\n✅ Number is registered on WhatsApp", 'green'))
                else:
                    print(colored("\n❌ Number is not registered on WhatsApp", 'red'))
                
                logging.info(f"Checked WhatsApp number: {number}")
            except subprocess.TimeoutExpired:
                print(colored("\n❌ Request timed out", 'red'))
            except Exception as e:
                print(colored(f"\n❌ Error: {e}", 'red'))
        except Exception as e:
            print(colored(f"❌ Error: {e}", 'red'))
            logging.error(f"Error checking WhatsApp number: {str(e)}")

    def socket_tools_menu(self):
        """Socket Tools Menu"""
        while True:
            try:
                os.system('clear')
                self.initialize_ui()
                print(colored("\n" + "="*20 + " Socket Tools " + "="*20, 'blue'))
                print(colored("1. Port Scan", 'light_cyan'))
                print(colored("2. Network Scan", 'light_cyan'))
                print(colored("3. TCP Connection Test", 'light_cyan'))
                print(colored("4. Create Socket Server", 'light_cyan'))
                print(colored("5. Create Socket Client", 'light_cyan'))
                print(colored("6. Create Socket File", 'light_cyan'))
                print(colored("0. Back to Main Menu", 'yellow'))
                
                choice = input(colored("\nSelect option: ", 'light_cyan'))
                
                if choice == "1":
                    self.port_scan()
                elif choice == "2":
                    self.network_scan()
                elif choice == "3":
                    self.tcp_test()
                elif choice == "4":
                    self.create_socket_server()
                elif choice == "5":
                    self.create_socket_client()
                elif choice == "6":
                    self.create_socket_file()
                elif choice == "0":
                    break
                else:
                    print(colored("❌ Invalid option!", 'red'))
                    time.sleep(1)
            except KeyboardInterrupt:
                break
            except Exception as e:
                logging.error(f"Error in socket menu: {str(e)}")
                print(colored(f"Error: {e}", 'red'))

    def port_scan(self):
        """Scan ports on an IP address"""
        try:
            print(colored("\n" + "="*20 + " Port Scan " + "="*20, 'blue'))
            target = input(colored("Enter IP address or domain: ", 'light_cyan'))
            ports = input(colored("Enter port range (e.g., 1-100): ", 'light_cyan'))
            
            try:
                start_port, end_port = map(int, ports.split('-'))
                if start_port < 1 or end_port > 65535 or start_port > end_port:
                    raise ValueError
            except ValueError:
                print(colored("❌ Invalid port range! Use format like 1-100", 'red'))
                return
            
            print(colored(f"\nScanning ports from {start_port} to {end_port} on {target}...", 'yellow'))
            
            open_ports = []
            threads = []
            
            def scan_port(port):
                try:
                    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                        sock.settimeout(1)
                        result = sock.connect_ex((target, port))
                        if result == 0:
                            open_ports.append(port)
                            print(colored(f"✅ Port {port} is open", 'green'))
                except Exception:
                    pass
            
            for port in range(start_port, end_port + 1):
                t = threading.Thread(target=scan_port, args=(port,))
                threads.append(t)
                t.start()
                
            for t in threads:
                t.join()
            
            if open_ports:
                print(colored("\nOpen ports: " + ", ".join(map(str, open_ports)), 'green'))
            else:
                print(colored("\n❌ No open ports found", 'red'))
            
            logging.info(f"Scanned ports on {target} between {start_port}-{end_port}")
        except Exception as e:
            print(colored(f"❌ Error: {e}", 'red'))
            logging.error(f"Error scanning ports: {str(e)}")

    def network_scan(self):
        """Scan local network"""
        try:
            print(colored("\n" + "="*20 + " Network Scan " + "="*20, 'blue'))
            network = input(colored("Enter network range (e.g., 192.168.1): ", 'light_cyan'))
            
            if not re.match(r'^\d{1,3}\.\d{1,3}\.\d{1,3}$', network):
                print(colored("❌ Invalid network format! Use format like 192.168.1", 'red'))
                return
            
            print(colored("\nScanning network...", 'yellow'))
            
            active_hosts = []
            threads = []
            
            def ping_host(ip):
                try:
                    response = os.system(f"ping -c 1 -w 1 {ip} > /dev/null 2>&1")
                    if response == 0:
                        active_hosts.append(ip)
                        print(colored(f"✅ {ip} is active", 'green'))
                    else:
                        print(colored(f"❌ {ip} is inactive", 'red'))
                except Exception:
                    pass
            
            for i in range(1, 255):
                ip = f"{network}.{i}"
                t = threading.Thread(target=ping_host, args=(ip,))
                threads.append(t)
                t.start()
                
            for t in threads:
                t.join()
            
            if active_hosts:
                print(colored("\nActive devices on network:", 'green'))
                for host in active_hosts:
                    print(colored(host, 'light_green'))
            else:
                print(colored("\n❌ No active devices found", 'red'))
            
            logging.info(f"Scanned network: {network}.0/24")
        except Exception as e:
            print(colored(f"❌ Error: {e}", 'red'))
            logging.error(f"Error scanning network: {str(e)}")

    def tcp_test(self):
        """Test TCP connection"""
        try:
            print(colored("\n" + "="*20 + " TCP Connection Test " + "="*20, 'blue'))
            host = input(colored("Enter hostname or IP: ", 'light_cyan'))
            port = int(input(colored("Enter port number: ", 'light_cyan')))
            
            if port < 1 or port > 65535:
                print(colored("❌ Invalid port number! Must be between 1-65535", 'red'))
                return
            
            print(colored("\nTesting connection...", 'yellow'))
            
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                sock.settimeout(3)
                
                try:
                    sock.connect((host, port))
                    print(colored(f"✅ TCP connection successful to {host}:{port}", 'green'))
                    logging.info(f"TCP connection successful to {host}:{port}")
                except socket.error as e:
                    print(colored(f"❌ Connection failed to {host}:{port}: {e}", 'red'))
                    logging.warning(f"TCP connection failed to {host}:{port}: {str(e)}")
        except ValueError:
            print(colored("❌ Invalid port number!", 'red'))
        except Exception as e:
            print(colored(f"❌ Error: {e}", 'red'))
            logging.error(f"Error in TCP test: {str(e)}")

    def create_socket_server(self):
        """Create a simple socket server"""
        try:
            print(colored("\n" + "="*20 + " Create Socket Server " + "="*20, 'blue'))
            host = input(colored("Enter host (leave empty for localhost): ", 'light_cyan')) or 'localhost'
            port = int(input(colored("Enter port number: ", 'light_cyan')))
            
            if port < 1 or port > 65535:
                print(colored("❌ Invalid port number! Must be between 1-65535", 'red'))
                return
            
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind((host, port))
                s.listen()
                print(colored(f"\n✅ Server started on {host}:{port}", 'green'))
                print(colored("Waiting for connections...", 'yellow'))
                print(colored("Press Ctrl+C to stop", 'yellow'))
                
                try:
                    conn, addr = s.accept()
                    with conn:
                        print(colored(f"\nConnected by {addr}", 'green'))
                        while True:
                            data = conn.recv(1024)
                            if not data:
                                break
                            print(colored(f"Received: {data.decode()}", 'light_green'))
                            conn.sendall(data)  # Echo back
                except KeyboardInterrupt:
                    print(colored("\nServer stopped", 'red'))
        except ValueError:
            print(colored("❌ Invalid port number!", 'red'))
        except Exception as e:
            print(colored(f"❌ Error: {e}", 'red'))
            logging.error(f"Error creating socket server: {str(e)}")

    def create_socket_client(self):
        """Create a simple socket client"""
        try:
            print(colored("\n" + "="*20 + " Create Socket Client " + "="*20, 'blue'))
            host = input(colored("Enter server host: ", 'light_cyan')) or 'localhost'
            port = int(input(colored("Enter server port: ", 'light_cyan')))
            
            if port < 1 or port > 65535:
                print(colored("❌ Invalid port number! Must be between 1-65535", 'red'))
                return
            
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                try:
                    s.connect((host, port))
                    print(colored(f"\n✅ Connected to server at {host}:{port}", 'green'))
                    
                    while True:
                        message = input(colored("Enter message to send (or 'exit' to quit): ", 'light_cyan'))
                        if message.lower() == 'exit':
                            break
                        s.sendall(message.encode())
                        data = s.recv(1024)
                        print(colored(f"Received: {data.decode()}", 'light_green'))
                except ConnectionRefusedError:
                    print(colored("❌ Connection refused. Is the server running?", 'red'))
        except ValueError:
            print(colored("❌ Invalid port number!", 'red'))
        except Exception as e:
            print(colored(f"❌ Error: {e}", 'red'))
            logging.error(f"Error creating socket client: {str(e)}")

    def create_socket_file(self):
        """Create a Unix domain socket file"""
        try:
            print(colored("\n" + "="*20 + " Create Socket File " + "="*20, 'blue'))
            socket_file = input(colored("Enter socket file path: ", 'light_cyan'))
            
            if not socket_file:
                print(colored("❌ Path cannot be empty!", 'red'))
                return
            
            if os.path.exists(socket_file):
                os.remove(socket_file)
                
            with socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) as s:
                s.bind(socket_file)
                s.listen()
                print(colored(f"\n✅ Socket file created at {socket_file}", 'green'))
                print(colored("Waiting for connections...", 'yellow'))
                print(colored("Press Ctrl+C to stop", 'yellow'))
                
                try:
                    conn, addr = s.accept()
                    with conn:
                        print(colored("\nClient connected", 'green'))
                        while True:
                            data = conn.recv(1024)
                            if not data:
                                break
                            print(colored(f"Received: {data.decode()}", 'light_green'))
                            conn.sendall(data)  # Echo back
                except KeyboardInterrupt:
                    print(colored("\nServer stopped", 'red'))
                
            if os.path.exists(socket_file):
                os.remove(socket_file)
        except Exception as e:
            print(colored(f"❌ Error: {e}", 'red'))
            logging.error(f"Error creating socket file: {str(e)}")
            if 'socket_file' in locals() and os.path.exists(socket_file):
                os.remove(socket_file)

    def security_tools_menu(self):
        """Security Tools Menu"""
        while True:
            try:
                os.system('clear')
                self.initialize_ui()
                print(colored("\n" + "="*20 + " Security Tools " + "="*20, 'red'))
                print(colored("1. Generate Strong Password", 'light_cyan'))
                print(colored("2. Generate MD5 Hash", 'light_cyan'))
                print(colored("3. Generate SHA256 Hash", 'light_cyan'))
                print(colored("4. Check File Integrity", 'light_cyan'))
                print(colored("0. Back to Main Menu", 'yellow'))
                
                choice = input(colored("\nSelect option: ", 'light_cyan'))
                
                if choice == "1":
                    self.generate_strong_password()
                elif choice == "2":
                    self.generate_md5_hash()
                elif choice == "3":
                    self.generate_sha256_hash()
                elif choice == "4":
                    self.check_file_integrity()
                elif choice == "0":
                    break
                else:
                    print(colored("❌ Invalid option!", 'red'))
                    time.sleep(1)
            except KeyboardInterrupt:
                break
            except Exception as e:
                logging.error(f"Error in security menu: {str(e)}")
                print(colored(f"Error: {e}", 'red'))

    def generate_strong_password(self):
        """Generate strong password"""
        try:
            print(colored("\n" + "="*20 + " Generate Strong Password " + "="*20, 'red'))
            length = int(input(colored("Enter password length (8-64): ", 'light_cyan')))
            length = max(8, min(64, length))
            
            chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()"
            password = ''.join(random.SystemRandom().choice(chars) for _ in range(length))
            
            print(colored("\nNew password:", 'green'))
            print(colored(password, 'light_green'))
            logging.info("Generated strong password")
        except ValueError:
            print(colored("❌ Invalid length! Please enter a number.", 'red'))
        except Exception as e:
            print(colored(f"❌ Error: {e}", 'red'))
            logging.error(f"Error generating password: {str(e)}")

    def generate_md5_hash(self):
        """Generate MD5 hash for text"""
        try:
            print(colored("\n" + "="*20 + " Generate MD5 Hash " + "="*20, 'red'))
            text = input(colored("Enter text: ", 'light_cyan'))
            md5_hash = hashlib.md5(text.encode()).hexdigest()
            
            print(colored("\nMD5 Hash:", 'green'))
            print(colored(md5_hash, 'light_green'))
            logging.info("Generated MD5 hash")
        except Exception as e:
            print(colored(f"❌ Error: {e}", 'red'))
            logging.error(f"Error generating MD5 hash: {str(e)}")

    def generate_sha256_hash(self):
        """Generate SHA256 hash for text"""
        try:
            print(colored("\n" + "="*20 + " Generate SHA256 Hash " + "="*20, 'red'))
            text = input(colored("Enter text: ", 'light_cyan'))
            sha256_hash = hashlib.sha256(text.encode()).hexdigest()
            
            print(colored("\nSHA256 Hash:", 'green'))
            print(colored(sha256_hash, 'light_green'))
            logging.info("Generated SHA256 hash")
        except Exception as e:
            print(colored(f"❌ Error: {e}", 'red'))
            logging.error(f"Error generating SHA256 hash: {str(e)}")

    def check_file_integrity(self):
        """Check file integrity using hash"""
        try:
            print(colored("\n" + "="*20 + " Check File Integrity " + "="*20, 'red'))
            file_path = input(colored("Enter file path: ", 'light_cyan'))
            
            if not os.path.exists(file_path):
                print(colored("❌ File does not exist!", 'red'))
                return
                
            expected_hash = input(colored("Enter expected hash (optional): ", 'light_cyan'))
            
            print(colored("\nCalculating hash...", 'yellow'))
            
            sha256_hash = hashlib.sha256()
            try:
                with open(file_path, 'rb') as f:
                    for chunk in iter(lambda: f.read(4096), b''):
                        sha256_hash.update(chunk)
                file_hash = sha256_hash.hexdigest()
                
                print(colored("\nFile SHA256 Hash:", 'green'))
                print(colored(file_hash, 'light_green'))
                
                if expected_hash:
                    if file_hash.lower() == expected_hash.lower():
                        print(colored("\n✅ Hash matches - File is intact", 'green'))
                    else:
                        print(colored("\n❌ Hash mismatch - File may be modified", 'red'))
                
                logging.info(f"Checked file integrity: {file_path}")
            except PermissionError:
                print(colored("❌ Permission denied to read the file", 'red'))
            except Exception as e:
                print(colored(f"❌ Error reading file: {e}", 'red'))
        except Exception as e:
            print(colored(f"❌ Error: {e}", 'red'))
            logging.error(f"Error checking file integrity: {str(e)}")

    def termux_utilities_menu(self):
        """Termux Utilities Menu"""
        while True:
            try:
                os.system('clear')
                self.initialize_ui()
                print(colored("\n" + "="*20 + " Termux Utilities " + "="*20, 'magenta'))
                print(colored("1. Update Packages", 'light_cyan'))
                print(colored("2. Install Package", 'light_cyan'))
                print(colored("3. Remove Package", 'light_cyan'))
                print(colored("4. Show System Info", 'light_cyan'))
                print(colored("5. Clean Cache", 'light_cyan'))
                print(colored("0. Back to Main Menu", 'yellow'))
                
                choice = input(colored("\nSelect option: ", 'light_cyan'))
                
                if choice == "1":
                    self.update_packages()
                elif choice == "2":
                    self.install_package()
                elif choice == "3":
                    self.remove_package()
                elif choice == "4":
                    self.show_system_info()
                elif choice == "5":
                    self.clean_cache()
                elif choice == "0":
                    break
                else:
                    print(colored("❌ Invalid option!", 'red'))
                    time.sleep(1)
            except KeyboardInterrupt:
                break
            except Exception as e:
                logging.error(f"Error in Termux utilities menu: {str(e)}")
                print(colored(f"Error: {e}", 'red'))

    def update_packages(self):
        """Update Termux packages"""
        try:
            print(colored("\n" + "="*20 + " Update Packages " + "="*20, 'magenta'))
            print(colored("\nUpdating package list...", 'yellow'))
            subprocess.run(["pkg", "update"], check=True)
            
            print(colored("\nUpgrading packages...", 'yellow'))
            subprocess.run(["pkg", "upgrade", "-y"], check=True)
            
            print(colored("\n✅ Update completed successfully", 'green'))
            logging.info("Updated Termux packages")
        except subprocess.CalledProcessError as e:
            print(colored(f"❌ Error updating packages: {e}", 'red'))
            logging.error(f"Error updating Termux packages: {str(e)}")
        except Exception as e:
            print(colored(f"❌ Error: {e}", 'red'))
            logging.error(f"Unexpected error in package update: {str(e)}")

    def install_package(self):
        """Install package in Termux"""
        try:
            print(colored("\n" + "="*20 + " Install Package " + "="*20, 'magenta'))
            package = input(colored("Enter package name: ", 'light_cyan'))
            
            if not package:
                print(colored("❌ Package name cannot be empty!", 'red'))
                return
            
            print(colored(f"\nInstalling {package}...", 'yellow'))
            subprocess.run(["pkg", "install", "-y", package], check=True)
            
            print(colored(f"\n✅ {package} installed successfully", 'green'))
            logging.info(f"Installed package: {package}")
        except subprocess.CalledProcessError as e:
            print(colored(f"❌ Error installing package: {e}", 'red'))
            logging.error(f"Error installing package {package}: {str(e)}")
        except Exception as e:
            print(colored(f"❌ Error: {e}", 'red'))
            logging.error(f"Unexpected error in package installation: {str(e)}")

    def remove_package(self):
        """Remove package from Termux"""
        try:
            print(colored("\n" + "="*20 + " Remove Package " + "="*20, 'magenta'))
            package = input(colored("Enter package name: ", 'light_cyan'))
            
            if not package:
                print(colored("❌ Package name cannot be empty!", 'red'))
                return
            
            print(colored(f"\nRemoving {package}...", 'yellow'))
            subprocess.run(["pkg", "uninstall", "-y", package], check=True)
            
            print(colored(f"\n✅ {package} removed successfully", 'green'))
            logging.info(f"Removed package: {package}")
        except subprocess.CalledProcessError as e:
            print(colored(f"❌ Error removing package: {e}", 'red'))
            logging.error(f"Error removing package {package}: {str(e)}")
        except Exception as e:
            print(colored(f"❌ Error: {e}", 'red'))
            logging.error(f"Unexpected error in package removal: {str(e)}")

    def show_system_info(self):
        """Show system information"""
        try:
            print(colored("\n" + "="*20 + " System Information " + "="*20, 'magenta'))
            print(colored("\nGathering system information...", 'yellow'))
            
            os_info = subprocess.run(["uname", "-a"], capture_output=True, text=True).stdout
            print(colored("\nOS Information:", 'green'))
            print(colored(os_info.strip(), 'light_green'))
            
            try:
                cpu_info = subprocess.run(["lscpu"], capture_output=True, text=True).stdout
                print(colored("\nCPU Information:", 'green'))
                print(colored(cpu_info.strip(), 'light_green'))
            except FileNotFoundError:
                print(colored("\nCPU Information: lscpu command not available", 'yellow'))
            
            try:
                mem_info = subprocess.run(["free", "-h"], capture_output=True, text=True).stdout
                print(colored("\nMemory Usage:", 'green'))
                print(colored(mem_info.strip(), 'light_green'))
            except FileNotFoundError:
                print(colored("\nMemory Usage: free command not available", 'yellow'))
            
            try:
                disk_info = subprocess.run(["df", "-h"], capture_output=True, text=True).stdout
                print(colored("\nStorage Space:", 'green'))
                print(colored(disk_info.strip(), 'light_green'))
            except FileNotFoundError:
                print(colored("\nStorage Space: df command not available", 'yellow'))
            
            logging.info("Displayed system information")
        except Exception as e:
            print(colored(f"❌ Error: {e}", 'red'))
            logging.error(f"Error displaying system info: {str(e)}")

    def clean_cache(self):
        """Clean package cache"""
        try:
            print(colored("\n" + "="*20 + " Clean Cache " + "="*20, 'magenta'))
            print(colored("\nCleaning...", 'yellow'))
            subprocess.run(["pkg", "clean"], check=True)
            
            print(colored("\n✅ Cache cleaned successfully", 'green'))
            logging.info("Cleaned package cache")
        except subprocess.CalledProcessError as e:
            print(colored(f"❌ Error cleaning: {e}", 'red'))
            logging.error(f"Error cleaning cache: {str(e)}")
        except Exception as e:
            print(colored(f"❌ Error: {e}", 'red'))
            logging.error(f"Unexpected error in cache cleaning: {str(e)}")

    def wifi_tools_menu(self):
        """Wi-Fi Tools Menu"""
        while True:
            try:
                os.system('clear')
                self.initialize_ui()
                print(colored("\n" + "="*20 + " Wi-Fi Tools " + "="*20, 'yellow'))
                print(colored("1. Scan Nearby Wi-Fi Networks", 'light_cyan'))
                print(colored("2. Show Current Wi-Fi Connection Info", 'light_cyan'))
                print(colored("3. Test Internet Speed", 'light_cyan'))
                print(colored("0. Back to Main Menu", 'yellow'))
                
                choice = input(colored("\nSelect option: ", 'light_cyan'))
                
                if choice == "1":
                    self.scan_wifi_networks()
                elif choice == "2":
                    self.show_wifi_info()
                elif choice == "3":
                    self.test_internet_speed()
                elif choice == "0":
                    break
                else:
                    print(colored("❌ Invalid option!", 'red'))
                    time.sleep(1)
            except KeyboardInterrupt:
                break
            except Exception as e:
                logging.error(f"Error in Wi-Fi menu: {str(e)}")
                print(colored(f"Error: {e}", 'red'))

    def scan_wifi_networks(self):
        """Scan nearby Wi-Fi networks"""
        try:
            print(colored("\n" + "="*20 + " Scan Wi-Fi Networks " + "="*20, 'yellow'))
            print(colored("\nScanning networks...", 'yellow'))
            
            try:
                result = subprocess.run(["termux-wifi-scaninfo"], capture_output=True, text=True)
                
                if result.returncode == 0:
                    print(colored("\nAvailable Networks:", 'green'))
                    print(colored(result.stdout, 'light_green'))
                else:
                    print(colored("\n❌ Failed to scan networks. Make sure Termux API is enabled", 'red'))
                    print(colored("Install Termux:API package and grant permissions", 'yellow'))
                
                logging.info("Scanned Wi-Fi networks")
            except FileNotFoundError:
                print(colored("\n❌ termux-wifi-scaninfo command not found", 'red'))
                print(colored("Install Termux:API package first", 'yellow'))
        except Exception as e:
            print(colored(f"❌ Error: {e}", 'red'))
            logging.error(f"Error scanning Wi-Fi networks: {str(e)}")

    def show_wifi_info(self):
        """Show current Wi-Fi connection info"""
        try:
            print(colored("\n" + "="*20 + " Current Wi-Fi Info " + "="*20, 'yellow'))
            print(colored("\nGathering information...", 'yellow'))
            
            try:
                result = subprocess.run(["termux-wifi-connectioninfo"], capture_output=True, text=True)
                
                if result.returncode == 0:
                    print(colored("\nConnection Info:", 'green'))
                    print(colored(result.stdout, 'light_green'))
                else:
                    print(colored("\n❌ Failed to get info. Make sure Termux API is enabled", 'red'))
                    print(colored("Install Termux:API package and grant permissions", 'yellow'))
                
                logging.info("Displayed current Wi-Fi info")
            except FileNotFoundError:
                print(colored("\n❌ termux-wifi-connectioninfo command not found", 'red'))
                print(colored("Install Termux:API package first", 'yellow'))
        except Exception as e:
            print(colored(f"❌ Error: {e}", 'red'))
            logging.error(f"Error displaying Wi-Fi info: {str(e)}")

    def test_internet_speed(self):
        """Test internet speed"""
        try:
            print(colored("\n" + "="*20 + " Internet Speed Test " + "="*20, 'yellow'))
            print(colored("\nTesting speed...", 'yellow'))
            
            print(colored("\nTesting download speed...", 'light_cyan'))
            try:
                download_speed = subprocess.run(["curl", "-o", "/dev/null", "-w", "%{speed_download}", 
                                              "http://speedtest.ftp.otenet.gr/files/test100k.db"], 
                                             capture_output=True, text=True, timeout=30).stdout
                download_speed = float(download_speed) / 1024
            except subprocess.TimeoutExpired:
                print(colored("\n❌ Download test timed out", 'red'))
                download_speed = 0
            except Exception as e:
                print(colored(f"\n❌ Download test failed: {e}", 'red'))
                download_speed = 0
            
            print(colored("\nTesting upload speed...", 'light_cyan'))
            try:
                upload_speed = subprocess.run(["curl", "-T", "-", "--limit-rate", "1M", "-w", "%{speed_upload}", 
                                            "http://speedtest.ftp.otenet.gr/"], 
                                           input="test", capture_output=True, text=True, timeout=30).stdout
                upload_speed = float(upload_speed) / 1024
            except subprocess.TimeoutExpired:
                print(colored("\n❌ Upload test timed out", 'red'))
                upload_speed = 0
            except Exception as e:
                print(colored(f"\n❌ Upload test failed: {e}", 'red'))
                upload_speed = 0
            
            print(colored("\nSpeed Test Results:", 'green'))
            print(colored(f"Download Speed: {download_speed:.2f} KB/s", 'light_green'))
            print(colored(f"Upload Speed: {upload_speed:.2f} KB/s", 'light_green'))
            
            logging.info(f"Tested internet speed: download={download_speed:.2f}KB/s upload={upload_speed:.2f}KB/s")
        except Exception as e:
            print(colored(f"❌ Error: {e}", 'red'))
            logging.error(f"Error testing internet speed: {str(e)}")

    def show_menu(self):
        """Show main menu"""
        print(colored("\n" + "="*20 + " Main Menu " + "="*20, 'cyan'))
        print(colored("1. WhatsApp Tools", 'green'))
        print(colored("2. Socket Tools", 'blue'))
        print(colored("3. Security Tools", 'red'))
        print(colored("4. Termux Utilities", 'magenta'))
        print(colored("5. Wi-Fi Tools", 'yellow'))
        print(colored("0. Exit", 'light_red'))
        
        return input(colored("\nSelect option: ", 'light_cyan'))

    def run(self):
        """Run the application"""
        try:
            self.start_telegram_bot()
            
            if not self.otp_authentication():
               sys.exit(1)
            
            while True:
                try:
                    os.system('clear')
                    self.initialize_ui()
                    choice = self.show_menu()
                    
                    if choice == "1":
                        self.whatsapp_tools_menu()
                    elif choice == "2":
                        self.socket_tools_menu()
                    elif choice == "3":
                        self.security_tools_menu()
                    elif choice == "4":
                        self.termux_utilities_menu()
                    elif choice == "5":
                        self.wifi_tools_menu()
                    elif choice == "0":
                        print(colored("\nClosing tool...", 'yellow'))
                        logging.info("Tool closed")
                        time.sleep(1)
                        os.system('clear')
                        break
                    else:
                        print(colored("❌ Invalid option!", 'red'))
                        time.sleep(1)
                except KeyboardInterrupt:
                    print(colored("\nReturning to main menu...", 'yellow'))
                    time.sleep(1)
        except KeyboardInterrupt:
            print(colored("\nTool stopped", 'red'))
            logging.warning("Tool stopped by user")
        except Exception as e:
            logging.critical(f"Unexpected error occurred: {str(e)}", exc_info=True)
            print(colored(f"An error occurred: {e}", 'red'))

if __name__ == "__main__":
    try:
        tool = TermuxMultiTool()
        tool.run()
    except KeyboardInterrupt:
        print(colored("\nTool stopped", 'red'))
    except Exception as e:
        print(colored(f"Error during execution: {e}", 'red'))
        logging.critical(f"Error during execution: {str(e)}", exc_info=True)').decode('utf-8'))